// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_message_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_message_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

<<<<<<< Updated upstream
#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/timestamp.pb.h"
=======
#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
>>>>>>> Stashed changes
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_message_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_message_2eproto {
<<<<<<< Updated upstream
  static const ::uint32_t offsets[];
=======
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
>>>>>>> Stashed changes
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_message_2eproto;
class InformationalMessageContents;
class InformationalMessageContentsDefaultTypeInternal;
extern InformationalMessageContentsDefaultTypeInternal _InformationalMessageContents_default_instance_;
class InformationalMessageContents_CollectionInformationRecord;
class InformationalMessageContents_CollectionInformationRecordDefaultTypeInternal;
extern InformationalMessageContents_CollectionInformationRecordDefaultTypeInternal _InformationalMessageContents_CollectionInformationRecord_default_instance_;
class InformationalMessageContents_CollectionInformationRecord_CreationRateData;
class InformationalMessageContents_CollectionInformationRecord_CreationRateDataDefaultTypeInternal;
extern InformationalMessageContents_CollectionInformationRecord_CreationRateDataDefaultTypeInternal _InformationalMessageContents_CollectionInformationRecord_CreationRateData_default_instance_;
class KeyspaceMessageContents;
class KeyspaceMessageContentsDefaultTypeInternal;
extern KeyspaceMessageContentsDefaultTypeInternal _KeyspaceMessageContents_default_instance_;
class KeyspaceMessageContents_Keyspace;
class KeyspaceMessageContents_KeyspaceDefaultTypeInternal;
extern KeyspaceMessageContents_KeyspaceDefaultTypeInternal _KeyspaceMessageContents_Keyspace_default_instance_;
class Message;
class MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template <>
::InformationalMessageContents* Arena::CreateMaybeMessage<::InformationalMessageContents>(Arena*);
template <>
::InformationalMessageContents_CollectionInformationRecord* Arena::CreateMaybeMessage<::InformationalMessageContents_CollectionInformationRecord>(Arena*);
template <>
::InformationalMessageContents_CollectionInformationRecord_CreationRateData* Arena::CreateMaybeMessage<::InformationalMessageContents_CollectionInformationRecord_CreationRateData>(Arena*);
template <>
::KeyspaceMessageContents* Arena::CreateMaybeMessage<::KeyspaceMessageContents>(Arena*);
template <>
::KeyspaceMessageContents_Keyspace* Arena::CreateMaybeMessage<::KeyspaceMessageContents_Keyspace>(Arena*);
template <>
::Message* Arena::CreateMaybeMessage<::Message>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum Message_ChannelState : int {
  Message_ChannelState_INITIAL_STARTUP = 0,
  Message_ChannelState_NORMAL_COMMUNICATION = 1,
  Message_ChannelState_CHANNEL_SHUTDOWN = 2,
<<<<<<< Updated upstream
  Message_ChannelState_Message_ChannelState_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Message_ChannelState_Message_ChannelState_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
=======
  Message_ChannelState_Message_ChannelState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Message_ChannelState_Message_ChannelState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
>>>>>>> Stashed changes
};

bool Message_ChannelState_IsValid(int value);
constexpr Message_ChannelState Message_ChannelState_ChannelState_MIN = static_cast<Message_ChannelState>(0);
constexpr Message_ChannelState Message_ChannelState_ChannelState_MAX = static_cast<Message_ChannelState>(2);
constexpr int Message_ChannelState_ChannelState_ARRAYSIZE = 2 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
Message_ChannelState_descriptor();
template <typename T>
const std::string& Message_ChannelState_Name(T value) {
  static_assert(std::is_same<T, Message_ChannelState>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ChannelState_Name().");
  return Message_ChannelState_Name(static_cast<Message_ChannelState>(value));
}
<<<<<<< Updated upstream
template <>
inline const std::string& Message_ChannelState_Name(Message_ChannelState value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<Message_ChannelState_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool Message_ChannelState_Parse(absl::string_view name, Message_ChannelState* value) {
=======
inline bool Message_ChannelState_Parse(
    const std::string& name, Message_ChannelState* value) {
>>>>>>> Stashed changes
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Message_ChannelState>(
      Message_ChannelState_descriptor(), name, value);
}
enum Message_MessageType : int {
  Message_MessageType_INFORMATION = 0,
  Message_MessageType_KEYSPACE = 1,
  Message_MessageType_DATA_REPLICATION_UNUSED = 2,
<<<<<<< Updated upstream
  Message_MessageType_Message_MessageType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Message_MessageType_Message_MessageType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
=======
  Message_MessageType_Message_MessageType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Message_MessageType_Message_MessageType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
>>>>>>> Stashed changes
};

bool Message_MessageType_IsValid(int value);
constexpr Message_MessageType Message_MessageType_MessageType_MIN = static_cast<Message_MessageType>(0);
constexpr Message_MessageType Message_MessageType_MessageType_MAX = static_cast<Message_MessageType>(2);
constexpr int Message_MessageType_MessageType_ARRAYSIZE = 2 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
Message_MessageType_descriptor();
template <typename T>
const std::string& Message_MessageType_Name(T value) {
  static_assert(std::is_same<T, Message_MessageType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to MessageType_Name().");
  return Message_MessageType_Name(static_cast<Message_MessageType>(value));
}
<<<<<<< Updated upstream
template <>
inline const std::string& Message_MessageType_Name(Message_MessageType value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<Message_MessageType_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool Message_MessageType_Parse(absl::string_view name, Message_MessageType* value) {
=======
inline bool Message_MessageType_Parse(
    const std::string& name, Message_MessageType* value) {
>>>>>>> Stashed changes
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Message_MessageType>(
      Message_MessageType_descriptor(), name, value);
}

// ===================================================================

<<<<<<< Updated upstream

// -------------------------------------------------------------------

class InformationalMessageContents_CollectionInformationRecord_CreationRateData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:InformationalMessageContents.CollectionInformationRecord.CreationRateData) */ {
 public:
  inline InformationalMessageContents_CollectionInformationRecord_CreationRateData() : InformationalMessageContents_CollectionInformationRecord_CreationRateData(nullptr) {}
  ~InformationalMessageContents_CollectionInformationRecord_CreationRateData() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR InformationalMessageContents_CollectionInformationRecord_CreationRateData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
=======
class InformationalMessageContents_CollectionInformationRecord_CreationRateData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:InformationalMessageContents.CollectionInformationRecord.CreationRateData) */ {
 public:
  InformationalMessageContents_CollectionInformationRecord_CreationRateData();
  virtual ~InformationalMessageContents_CollectionInformationRecord_CreationRateData();
>>>>>>> Stashed changes

  InformationalMessageContents_CollectionInformationRecord_CreationRateData(const InformationalMessageContents_CollectionInformationRecord_CreationRateData& from);
  InformationalMessageContents_CollectionInformationRecord_CreationRateData(InformationalMessageContents_CollectionInformationRecord_CreationRateData&& from) noexcept
    : InformationalMessageContents_CollectionInformationRecord_CreationRateData() {
    *this = ::std::move(from);
  }

  inline InformationalMessageContents_CollectionInformationRecord_CreationRateData& operator=(const InformationalMessageContents_CollectionInformationRecord_CreationRateData& from) {
    CopyFrom(from);
    return *this;
  }
  inline InformationalMessageContents_CollectionInformationRecord_CreationRateData& operator=(InformationalMessageContents_CollectionInformationRecord_CreationRateData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InformationalMessageContents_CollectionInformationRecord_CreationRateData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InformationalMessageContents_CollectionInformationRecord_CreationRateData* internal_default_instance() {
    return reinterpret_cast<const InformationalMessageContents_CollectionInformationRecord_CreationRateData*>(
               &_InformationalMessageContents_CollectionInformationRecord_CreationRateData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(InformationalMessageContents_CollectionInformationRecord_CreationRateData& a, InformationalMessageContents_CollectionInformationRecord_CreationRateData& b) {
    a.Swap(&b);
  }
  inline void Swap(InformationalMessageContents_CollectionInformationRecord_CreationRateData* other) {
    if (other == this) return;
<<<<<<< Updated upstream
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InformationalMessageContents_CollectionInformationRecord_CreationRateData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
=======
>>>>>>> Stashed changes
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InformationalMessageContents_CollectionInformationRecord_CreationRateData* New() const final {
    return CreateMaybeMessage<InformationalMessageContents_CollectionInformationRecord_CreationRateData>(nullptr);
  }

  InformationalMessageContents_CollectionInformationRecord_CreationRateData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InformationalMessageContents_CollectionInformationRecord_CreationRateData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InformationalMessageContents_CollectionInformationRecord_CreationRateData& from);
<<<<<<< Updated upstream
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const InformationalMessageContents_CollectionInformationRecord_CreationRateData& from) {
    InformationalMessageContents_CollectionInformationRecord_CreationRateData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
=======
  void MergeFrom(const InformationalMessageContents_CollectionInformationRecord_CreationRateData& from);
>>>>>>> Stashed changes
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
<<<<<<< Updated upstream
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
=======
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
>>>>>>> Stashed changes
  void SetCachedSize(int size) const final;
  void InternalSwap(InformationalMessageContents_CollectionInformationRecord_CreationRateData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "InformationalMessageContents.CollectionInformationRecord.CreationRateData";
  }
<<<<<<< Updated upstream
  protected:
  explicit InformationalMessageContents_CollectionInformationRecord_CreationRateData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
=======
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
>>>>>>> Stashed changes
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShortAllocationRatioFieldNumber = 1,
    kLongAllocationRatioFieldNumber = 2,
    kCreatedPreviousDayFieldNumber = 3,
    kCreatedPreviousWeekFieldNumber = 4,
  };
  // double shortAllocationRatio = 1;
  void clear_shortallocationratio() ;
  double shortallocationratio() const;
  void set_shortallocationratio(double value);

  private:
  double _internal_shortallocationratio() const;
  void _internal_set_shortallocationratio(double value);

  public:
  // double longAllocationRatio = 2;
  void clear_longallocationratio() ;
  double longallocationratio() const;
  void set_longallocationratio(double value);

  private:
  double _internal_longallocationratio() const;
  void _internal_set_longallocationratio(double value);

  public:
  // double createdPreviousDay = 3;
  void clear_createdpreviousday() ;
  double createdpreviousday() const;
  void set_createdpreviousday(double value);

  private:
  double _internal_createdpreviousday() const;
  void _internal_set_createdpreviousday(double value);

  public:
  // double createdPreviousWeek = 4;
  void clear_createdpreviousweek() ;
  double createdpreviousweek() const;
  void set_createdpreviousweek(double value);

  private:
  double _internal_createdpreviousweek() const;
  void _internal_set_createdpreviousweek(double value);

  public:
  // @@protoc_insertion_point(class_scope:InformationalMessageContents.CollectionInformationRecord.CreationRateData)
 private:
  class _Internal;

<<<<<<< Updated upstream
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double shortallocationratio_;
    double longallocationratio_;
    double createdpreviousday_;
    double createdpreviousweek_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
=======
  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double shortallocationratio_;
  double longallocationratio_;
  double createdpreviousday_;
  double createdpreviousweek_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
>>>>>>> Stashed changes
  friend struct ::TableStruct_message_2eproto;
};// -------------------------------------------------------------------

class InformationalMessageContents_CollectionInformationRecord :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:InformationalMessageContents.CollectionInformationRecord) */ {
 public:
<<<<<<< Updated upstream
  inline InformationalMessageContents_CollectionInformationRecord() : InformationalMessageContents_CollectionInformationRecord(nullptr) {}
  ~InformationalMessageContents_CollectionInformationRecord() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR InformationalMessageContents_CollectionInformationRecord(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
=======
  InformationalMessageContents_CollectionInformationRecord();
  virtual ~InformationalMessageContents_CollectionInformationRecord();
>>>>>>> Stashed changes

  InformationalMessageContents_CollectionInformationRecord(const InformationalMessageContents_CollectionInformationRecord& from);
  InformationalMessageContents_CollectionInformationRecord(InformationalMessageContents_CollectionInformationRecord&& from) noexcept
    : InformationalMessageContents_CollectionInformationRecord() {
    *this = ::std::move(from);
  }

  inline InformationalMessageContents_CollectionInformationRecord& operator=(const InformationalMessageContents_CollectionInformationRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline InformationalMessageContents_CollectionInformationRecord& operator=(InformationalMessageContents_CollectionInformationRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InformationalMessageContents_CollectionInformationRecord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InformationalMessageContents_CollectionInformationRecord* internal_default_instance() {
    return reinterpret_cast<const InformationalMessageContents_CollectionInformationRecord*>(
               &_InformationalMessageContents_CollectionInformationRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(InformationalMessageContents_CollectionInformationRecord& a, InformationalMessageContents_CollectionInformationRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(InformationalMessageContents_CollectionInformationRecord* other) {
    if (other == this) return;
<<<<<<< Updated upstream
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InformationalMessageContents_CollectionInformationRecord* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
=======
>>>>>>> Stashed changes
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InformationalMessageContents_CollectionInformationRecord* New() const final {
    return CreateMaybeMessage<InformationalMessageContents_CollectionInformationRecord>(nullptr);
  }

  InformationalMessageContents_CollectionInformationRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InformationalMessageContents_CollectionInformationRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InformationalMessageContents_CollectionInformationRecord& from);
<<<<<<< Updated upstream
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const InformationalMessageContents_CollectionInformationRecord& from) {
    InformationalMessageContents_CollectionInformationRecord::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
=======
  void MergeFrom(const InformationalMessageContents_CollectionInformationRecord& from);
>>>>>>> Stashed changes
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
<<<<<<< Updated upstream
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
=======
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
>>>>>>> Stashed changes
  void SetCachedSize(int size) const final;
  void InternalSwap(InformationalMessageContents_CollectionInformationRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "InformationalMessageContents.CollectionInformationRecord";
  }
<<<<<<< Updated upstream
  protected:
  explicit InformationalMessageContents_CollectionInformationRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
=======
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
>>>>>>> Stashed changes
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef InformationalMessageContents_CollectionInformationRecord_CreationRateData CreationRateData;

  // accessors -------------------------------------------------------

  enum : int {
    kCollectionNameFieldNumber = 1,
    kCreationRateDataFieldNumber = 2,
  };
  // string collectionName = 1;
  void clear_collectionname() ;
  const std::string& collectionname() const;
<<<<<<< Updated upstream




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_collectionname(Arg_&& arg, Args_... args);
  std::string* mutable_collectionname();
  PROTOBUF_NODISCARD std::string* release_collectionname();
  void set_allocated_collectionname(std::string* ptr);

  private:
  const std::string& _internal_collectionname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_collectionname(
      const std::string& value);
=======
  void set_collectionname(const std::string& value);
  void set_collectionname(std::string&& value);
  void set_collectionname(const char* value);
  void set_collectionname(const char* value, size_t size);
  std::string* mutable_collectionname();
  std::string* release_collectionname();
  void set_allocated_collectionname(std::string* collectionname);
  private:
  const std::string& _internal_collectionname() const;
  void _internal_set_collectionname(const std::string& value);
>>>>>>> Stashed changes
  std::string* _internal_mutable_collectionname();

  public:
  // .InformationalMessageContents.CollectionInformationRecord.CreationRateData creationRateData = 2;
  bool has_creationratedata() const;
  void clear_creationratedata() ;
  const ::InformationalMessageContents_CollectionInformationRecord_CreationRateData& creationratedata() const;
  ::InformationalMessageContents_CollectionInformationRecord_CreationRateData* release_creationratedata();
  ::InformationalMessageContents_CollectionInformationRecord_CreationRateData* mutable_creationratedata();
  void set_allocated_creationratedata(::InformationalMessageContents_CollectionInformationRecord_CreationRateData* creationratedata);
  private:
  const ::InformationalMessageContents_CollectionInformationRecord_CreationRateData& _internal_creationratedata() const;
  ::InformationalMessageContents_CollectionInformationRecord_CreationRateData* _internal_mutable_creationratedata();
  public:
<<<<<<< Updated upstream
  void unsafe_arena_set_allocated_creationratedata(
      ::InformationalMessageContents_CollectionInformationRecord_CreationRateData* creationratedata);
  ::InformationalMessageContents_CollectionInformationRecord_CreationRateData* unsafe_arena_release_creationratedata();
=======

>>>>>>> Stashed changes
  // @@protoc_insertion_point(class_scope:InformationalMessageContents.CollectionInformationRecord)
 private:
  class _Internal;

<<<<<<< Updated upstream
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collectionname_;
    ::InformationalMessageContents_CollectionInformationRecord_CreationRateData* creationratedata_;
  };
  union { Impl_ _impl_; };
=======
  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collectionname_;
  ::InformationalMessageContents_CollectionInformationRecord_CreationRateData* creationratedata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
>>>>>>> Stashed changes
  friend struct ::TableStruct_message_2eproto;
};// -------------------------------------------------------------------

class InformationalMessageContents :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:InformationalMessageContents) */ {
 public:
<<<<<<< Updated upstream
  inline InformationalMessageContents() : InformationalMessageContents(nullptr) {}
  ~InformationalMessageContents() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR InformationalMessageContents(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
=======
  InformationalMessageContents();
  virtual ~InformationalMessageContents();
>>>>>>> Stashed changes

  InformationalMessageContents(const InformationalMessageContents& from);
  InformationalMessageContents(InformationalMessageContents&& from) noexcept
    : InformationalMessageContents() {
    *this = ::std::move(from);
  }

  inline InformationalMessageContents& operator=(const InformationalMessageContents& from) {
    CopyFrom(from);
    return *this;
  }
  inline InformationalMessageContents& operator=(InformationalMessageContents&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InformationalMessageContents& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InformationalMessageContents* internal_default_instance() {
    return reinterpret_cast<const InformationalMessageContents*>(
               &_InformationalMessageContents_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(InformationalMessageContents& a, InformationalMessageContents& b) {
    a.Swap(&b);
  }
  inline void Swap(InformationalMessageContents* other) {
    if (other == this) return;
<<<<<<< Updated upstream
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InformationalMessageContents* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
=======
>>>>>>> Stashed changes
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InformationalMessageContents* New() const final {
    return CreateMaybeMessage<InformationalMessageContents>(nullptr);
  }

  InformationalMessageContents* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InformationalMessageContents>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InformationalMessageContents& from);
<<<<<<< Updated upstream
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const InformationalMessageContents& from) {
    InformationalMessageContents::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
=======
  void MergeFrom(const InformationalMessageContents& from);
>>>>>>> Stashed changes
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
<<<<<<< Updated upstream
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
=======
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
>>>>>>> Stashed changes
  void SetCachedSize(int size) const final;
  void InternalSwap(InformationalMessageContents* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "InformationalMessageContents";
  }
<<<<<<< Updated upstream
  protected:
  explicit InformationalMessageContents(::PROTOBUF_NAMESPACE_ID::Arena* arena);
=======
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
>>>>>>> Stashed changes
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef InformationalMessageContents_CollectionInformationRecord CollectionInformationRecord;

  // accessors -------------------------------------------------------

  enum : int {
    kRecordsFieldNumber = 1,
  };
  // repeated .InformationalMessageContents.CollectionInformationRecord records = 1;
  int records_size() const;
  private:
  int _internal_records_size() const;

  public:
  void clear_records() ;
  ::InformationalMessageContents_CollectionInformationRecord* mutable_records(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InformationalMessageContents_CollectionInformationRecord >*
      mutable_records();
  private:
  const ::InformationalMessageContents_CollectionInformationRecord& _internal_records(int index) const;
  ::InformationalMessageContents_CollectionInformationRecord* _internal_add_records();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::InformationalMessageContents_CollectionInformationRecord>& _internal_records() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::InformationalMessageContents_CollectionInformationRecord>* _internal_mutable_records();
  public:
  const ::InformationalMessageContents_CollectionInformationRecord& records(int index) const;
  ::InformationalMessageContents_CollectionInformationRecord* add_records();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InformationalMessageContents_CollectionInformationRecord >&
      records() const;
  // @@protoc_insertion_point(class_scope:InformationalMessageContents)
 private:
  class _Internal;

<<<<<<< Updated upstream
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InformationalMessageContents_CollectionInformationRecord > records_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
=======
  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InformationalMessageContents_CollectionInformationRecord > records_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
>>>>>>> Stashed changes
  friend struct ::TableStruct_message_2eproto;
};// -------------------------------------------------------------------

class KeyspaceMessageContents_Keyspace :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KeyspaceMessageContents.Keyspace) */ {
 public:
<<<<<<< Updated upstream
  inline KeyspaceMessageContents_Keyspace() : KeyspaceMessageContents_Keyspace(nullptr) {}
  ~KeyspaceMessageContents_Keyspace() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR KeyspaceMessageContents_Keyspace(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
=======
  KeyspaceMessageContents_Keyspace();
  virtual ~KeyspaceMessageContents_Keyspace();
>>>>>>> Stashed changes

  KeyspaceMessageContents_Keyspace(const KeyspaceMessageContents_Keyspace& from);
  KeyspaceMessageContents_Keyspace(KeyspaceMessageContents_Keyspace&& from) noexcept
    : KeyspaceMessageContents_Keyspace() {
    *this = ::std::move(from);
  }

  inline KeyspaceMessageContents_Keyspace& operator=(const KeyspaceMessageContents_Keyspace& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyspaceMessageContents_Keyspace& operator=(KeyspaceMessageContents_Keyspace&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KeyspaceMessageContents_Keyspace& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KeyspaceMessageContents_Keyspace* internal_default_instance() {
    return reinterpret_cast<const KeyspaceMessageContents_Keyspace*>(
               &_KeyspaceMessageContents_Keyspace_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(KeyspaceMessageContents_Keyspace& a, KeyspaceMessageContents_Keyspace& b) {
    a.Swap(&b);
  }
  inline void Swap(KeyspaceMessageContents_Keyspace* other) {
    if (other == this) return;
<<<<<<< Updated upstream
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeyspaceMessageContents_Keyspace* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
=======
>>>>>>> Stashed changes
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KeyspaceMessageContents_Keyspace* New() const final {
    return CreateMaybeMessage<KeyspaceMessageContents_Keyspace>(nullptr);
  }

  KeyspaceMessageContents_Keyspace* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KeyspaceMessageContents_Keyspace>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KeyspaceMessageContents_Keyspace& from);
<<<<<<< Updated upstream
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const KeyspaceMessageContents_Keyspace& from) {
    KeyspaceMessageContents_Keyspace::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
=======
  void MergeFrom(const KeyspaceMessageContents_Keyspace& from);
>>>>>>> Stashed changes
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
<<<<<<< Updated upstream
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
=======
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
>>>>>>> Stashed changes
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyspaceMessageContents_Keyspace* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "KeyspaceMessageContents.Keyspace";
  }
<<<<<<< Updated upstream
  protected:
  explicit KeyspaceMessageContents_Keyspace(::PROTOBUF_NAMESPACE_ID::Arena* arena);
=======
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
>>>>>>> Stashed changes
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kStartIDFieldNumber = 2,
    kEndIDFieldNumber = 3,
    kSuffixBitsFieldNumber = 4,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
<<<<<<< Updated upstream




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
=======
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
>>>>>>> Stashed changes
  std::string* _internal_mutable_name();

  public:
  // uint64 startID = 2;
<<<<<<< Updated upstream
  void clear_startid() ;
  ::uint64_t startid() const;
  void set_startid(::uint64_t value);
=======
  void clear_startid();
  ::PROTOBUF_NAMESPACE_ID::uint64 startid() const;
  void set_startid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_startid() const;
  void _internal_set_startid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:
>>>>>>> Stashed changes

  private:
  ::uint64_t _internal_startid() const;
  void _internal_set_startid(::uint64_t value);

  public:
  // uint64 endID = 3;
<<<<<<< Updated upstream
  void clear_endid() ;
  ::uint64_t endid() const;
  void set_endid(::uint64_t value);
=======
  void clear_endid();
  ::PROTOBUF_NAMESPACE_ID::uint64 endid() const;
  void set_endid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_endid() const;
  void _internal_set_endid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:
>>>>>>> Stashed changes

  private:
  ::uint64_t _internal_endid() const;
  void _internal_set_endid(::uint64_t value);

  public:
  // uint32 suffixBits = 4;
<<<<<<< Updated upstream
  void clear_suffixbits() ;
  ::uint32_t suffixbits() const;
  void set_suffixbits(::uint32_t value);
=======
  void clear_suffixbits();
  ::PROTOBUF_NAMESPACE_ID::uint32 suffixbits() const;
  void set_suffixbits(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_suffixbits() const;
  void _internal_set_suffixbits(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:
>>>>>>> Stashed changes

  private:
  ::uint32_t _internal_suffixbits() const;
  void _internal_set_suffixbits(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:KeyspaceMessageContents.Keyspace)
 private:
  class _Internal;

<<<<<<< Updated upstream
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::uint64_t startid_;
    ::uint64_t endid_;
    ::uint32_t suffixbits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
=======
  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 startid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 endid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 suffixbits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
>>>>>>> Stashed changes
  friend struct ::TableStruct_message_2eproto;
};// -------------------------------------------------------------------

class KeyspaceMessageContents :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KeyspaceMessageContents) */ {
 public:
<<<<<<< Updated upstream
  inline KeyspaceMessageContents() : KeyspaceMessageContents(nullptr) {}
  ~KeyspaceMessageContents() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR KeyspaceMessageContents(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
=======
  KeyspaceMessageContents();
  virtual ~KeyspaceMessageContents();
>>>>>>> Stashed changes

  KeyspaceMessageContents(const KeyspaceMessageContents& from);
  KeyspaceMessageContents(KeyspaceMessageContents&& from) noexcept
    : KeyspaceMessageContents() {
    *this = ::std::move(from);
  }

  inline KeyspaceMessageContents& operator=(const KeyspaceMessageContents& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyspaceMessageContents& operator=(KeyspaceMessageContents&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KeyspaceMessageContents& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KeyspaceMessageContents* internal_default_instance() {
    return reinterpret_cast<const KeyspaceMessageContents*>(
               &_KeyspaceMessageContents_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(KeyspaceMessageContents& a, KeyspaceMessageContents& b) {
    a.Swap(&b);
  }
  inline void Swap(KeyspaceMessageContents* other) {
    if (other == this) return;
<<<<<<< Updated upstream
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeyspaceMessageContents* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
=======
>>>>>>> Stashed changes
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KeyspaceMessageContents* New() const final {
    return CreateMaybeMessage<KeyspaceMessageContents>(nullptr);
  }

  KeyspaceMessageContents* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KeyspaceMessageContents>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KeyspaceMessageContents& from);
<<<<<<< Updated upstream
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const KeyspaceMessageContents& from) {
    KeyspaceMessageContents::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
=======
  void MergeFrom(const KeyspaceMessageContents& from);
>>>>>>> Stashed changes
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
<<<<<<< Updated upstream
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
=======
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
>>>>>>> Stashed changes
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyspaceMessageContents* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "KeyspaceMessageContents";
  }
<<<<<<< Updated upstream
  protected:
  explicit KeyspaceMessageContents(::PROTOBUF_NAMESPACE_ID::Arena* arena);
=======
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
>>>>>>> Stashed changes
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef KeyspaceMessageContents_Keyspace Keyspace;

  // accessors -------------------------------------------------------

  enum : int {
    kKeyspacesFieldNumber = 1,
  };
  // repeated .KeyspaceMessageContents.Keyspace keyspaces = 1;
  int keyspaces_size() const;
  private:
  int _internal_keyspaces_size() const;

  public:
  void clear_keyspaces() ;
  ::KeyspaceMessageContents_Keyspace* mutable_keyspaces(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KeyspaceMessageContents_Keyspace >*
      mutable_keyspaces();
  private:
  const ::KeyspaceMessageContents_Keyspace& _internal_keyspaces(int index) const;
  ::KeyspaceMessageContents_Keyspace* _internal_add_keyspaces();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::KeyspaceMessageContents_Keyspace>& _internal_keyspaces() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::KeyspaceMessageContents_Keyspace>* _internal_mutable_keyspaces();
  public:
  const ::KeyspaceMessageContents_Keyspace& keyspaces(int index) const;
  ::KeyspaceMessageContents_Keyspace* add_keyspaces();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KeyspaceMessageContents_Keyspace >&
      keyspaces() const;
  // @@protoc_insertion_point(class_scope:KeyspaceMessageContents)
 private:
  class _Internal;

<<<<<<< Updated upstream
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KeyspaceMessageContents_Keyspace > keyspaces_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
=======
  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KeyspaceMessageContents_Keyspace > keyspaces_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
>>>>>>> Stashed changes
  friend struct ::TableStruct_message_2eproto;
};// -------------------------------------------------------------------

class Message :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Message) */ {
 public:
<<<<<<< Updated upstream
  inline Message() : Message(nullptr) {}
  ~Message() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Message(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
=======
  Message();
  virtual ~Message();
>>>>>>> Stashed changes

  Message(const Message& from);
  Message(Message&& from) noexcept
    : Message() {
    *this = ::std::move(from);
  }

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message& operator=(Message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message& default_instance();

  enum MessageCase {
    kInfo = 8,
    kKeyspace = 9,
    MESSAGE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
               &_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Message& a, Message& b) {
    a.Swap(&b);
  }
  inline void Swap(Message* other) {
    if (other == this) return;
<<<<<<< Updated upstream
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
=======
>>>>>>> Stashed changes
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message* New() const final {
    return CreateMaybeMessage<Message>(nullptr);
  }

  Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message& from);
<<<<<<< Updated upstream
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Message& from) {
    Message::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
=======
  void MergeFrom(const Message& from);
>>>>>>> Stashed changes
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
<<<<<<< Updated upstream
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
=======
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
>>>>>>> Stashed changes
  void SetCachedSize(int size) const final;
  void InternalSwap(Message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "Message";
  }
<<<<<<< Updated upstream
  protected:
  explicit Message(::PROTOBUF_NAMESPACE_ID::Arena* arena);
=======
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
>>>>>>> Stashed changes
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  using ChannelState = Message_ChannelState;
  static constexpr ChannelState INITIAL_STARTUP = Message_ChannelState_INITIAL_STARTUP;
  static constexpr ChannelState NORMAL_COMMUNICATION = Message_ChannelState_NORMAL_COMMUNICATION;
  static constexpr ChannelState CHANNEL_SHUTDOWN = Message_ChannelState_CHANNEL_SHUTDOWN;
  static inline bool ChannelState_IsValid(int value) {
    return Message_ChannelState_IsValid(value);
  }
  static constexpr ChannelState ChannelState_MIN = Message_ChannelState_ChannelState_MIN;
  static constexpr ChannelState ChannelState_MAX = Message_ChannelState_ChannelState_MAX;
  static constexpr int ChannelState_ARRAYSIZE = Message_ChannelState_ChannelState_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChannelState_descriptor() {
    return Message_ChannelState_descriptor();
  }
  template <typename T>
  static inline const std::string& ChannelState_Name(T value) {
    return Message_ChannelState_Name(value);
  }
<<<<<<< Updated upstream
  static inline bool ChannelState_Parse(absl::string_view name, ChannelState* value) {
=======
  static inline bool ChannelState_Parse(const std::string& name,
      ChannelState* value) {
>>>>>>> Stashed changes
    return Message_ChannelState_Parse(name, value);
  }

  using MessageType = Message_MessageType;
  static constexpr MessageType INFORMATION = Message_MessageType_INFORMATION;
  static constexpr MessageType KEYSPACE = Message_MessageType_KEYSPACE;
  static constexpr MessageType DATA_REPLICATION_UNUSED = Message_MessageType_DATA_REPLICATION_UNUSED;
  static inline bool MessageType_IsValid(int value) {
    return Message_MessageType_IsValid(value);
  }
  static constexpr MessageType MessageType_MIN = Message_MessageType_MessageType_MIN;
  static constexpr MessageType MessageType_MAX = Message_MessageType_MessageType_MAX;
  static constexpr int MessageType_ARRAYSIZE = Message_MessageType_MessageType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageType_descriptor() {
    return Message_MessageType_descriptor();
  }
  template <typename T>
  static inline const std::string& MessageType_Name(T value) {
    return Message_MessageType_Name(value);
  }
<<<<<<< Updated upstream
  static inline bool MessageType_Parse(absl::string_view name, MessageType* value) {
=======
  static inline bool MessageType_Parse(const std::string& name,
      MessageType* value) {
>>>>>>> Stashed changes
    return Message_MessageType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSourceNodeIDFieldNumber = 1,
    kDestNodeIDFieldNumber = 2,
    kTimestampFieldNumber = 5,
    kLastReceivedMsgFieldNumber = 3,
    kChannelStateFieldNumber = 4,
    kMessageTypeFieldNumber = 7,
    kMessageIDFieldNumber = 6,
    kInfoFieldNumber = 8,
    kKeyspaceFieldNumber = 9,
  };
  // bytes sourceNodeID = 1;
  void clear_sourcenodeid() ;
  const std::string& sourcenodeid() const;
<<<<<<< Updated upstream




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_sourcenodeid(Arg_&& arg, Args_... args);
  std::string* mutable_sourcenodeid();
  PROTOBUF_NODISCARD std::string* release_sourcenodeid();
  void set_allocated_sourcenodeid(std::string* ptr);

  private:
  const std::string& _internal_sourcenodeid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sourcenodeid(
      const std::string& value);
=======
  void set_sourcenodeid(const std::string& value);
  void set_sourcenodeid(std::string&& value);
  void set_sourcenodeid(const char* value);
  void set_sourcenodeid(const void* value, size_t size);
  std::string* mutable_sourcenodeid();
  std::string* release_sourcenodeid();
  void set_allocated_sourcenodeid(std::string* sourcenodeid);
  private:
  const std::string& _internal_sourcenodeid() const;
  void _internal_set_sourcenodeid(const std::string& value);
>>>>>>> Stashed changes
  std::string* _internal_mutable_sourcenodeid();

  public:
  // bytes destNodeID = 2;
  void clear_destnodeid() ;
  const std::string& destnodeid() const;
<<<<<<< Updated upstream




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_destnodeid(Arg_&& arg, Args_... args);
  std::string* mutable_destnodeid();
  PROTOBUF_NODISCARD std::string* release_destnodeid();
  void set_allocated_destnodeid(std::string* ptr);

  private:
  const std::string& _internal_destnodeid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_destnodeid(
      const std::string& value);
=======
  void set_destnodeid(const std::string& value);
  void set_destnodeid(std::string&& value);
  void set_destnodeid(const char* value);
  void set_destnodeid(const void* value, size_t size);
  std::string* mutable_destnodeid();
  std::string* release_destnodeid();
  void set_allocated_destnodeid(std::string* destnodeid);
  private:
  const std::string& _internal_destnodeid() const;
  void _internal_set_destnodeid(const std::string& value);
>>>>>>> Stashed changes
  std::string* _internal_mutable_destnodeid();

  public:
  // .google.protobuf.Timestamp timestamp = 5;
  bool has_timestamp() const;
<<<<<<< Updated upstream
  void clear_timestamp() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_timestamp();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
=======
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_timestamp();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
>>>>>>> Stashed changes
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_timestamp();
  public:
<<<<<<< Updated upstream
  void unsafe_arena_set_allocated_timestamp(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_timestamp();
  // uint64 lastReceivedMsg = 3;
  void clear_lastreceivedmsg() ;
  ::uint64_t lastreceivedmsg() const;
  void set_lastreceivedmsg(::uint64_t value);
=======

  // uint64 lastReceivedMsg = 3;
  void clear_lastreceivedmsg();
  ::PROTOBUF_NAMESPACE_ID::uint64 lastreceivedmsg() const;
  void set_lastreceivedmsg(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_lastreceivedmsg() const;
  void _internal_set_lastreceivedmsg(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:
>>>>>>> Stashed changes

  private:
  ::uint64_t _internal_lastreceivedmsg() const;
  void _internal_set_lastreceivedmsg(::uint64_t value);

  public:
  // .Message.ChannelState channelState = 4;
  void clear_channelstate() ;
  ::Message_ChannelState channelstate() const;
  void set_channelstate(::Message_ChannelState value);

  private:
  ::Message_ChannelState _internal_channelstate() const;
  void _internal_set_channelstate(::Message_ChannelState value);

  public:
  // .Message.MessageType messageType = 7;
  void clear_messagetype() ;
  ::Message_MessageType messagetype() const;
  void set_messagetype(::Message_MessageType value);

  private:
  ::Message_MessageType _internal_messagetype() const;
  void _internal_set_messagetype(::Message_MessageType value);

  public:
  // sint64 messageID = 6;
<<<<<<< Updated upstream
  void clear_messageid() ;
  ::int64_t messageid() const;
  void set_messageid(::int64_t value);
=======
  void clear_messageid();
  ::PROTOBUF_NAMESPACE_ID::int64 messageid() const;
  void set_messageid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_messageid() const;
  void _internal_set_messageid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:
>>>>>>> Stashed changes

  private:
  ::int64_t _internal_messageid() const;
  void _internal_set_messageid(::int64_t value);

  public:
  // .InformationalMessageContents info = 8;
  bool has_info() const;
  private:
  bool _internal_has_info() const;

  public:
  void clear_info() ;
  const ::InformationalMessageContents& info() const;
  ::InformationalMessageContents* release_info();
  ::InformationalMessageContents* mutable_info();
  void set_allocated_info(::InformationalMessageContents* info);
  private:
  const ::InformationalMessageContents& _internal_info() const;
  ::InformationalMessageContents* _internal_mutable_info();
  public:
<<<<<<< Updated upstream
  void unsafe_arena_set_allocated_info(
      ::InformationalMessageContents* info);
  ::InformationalMessageContents* unsafe_arena_release_info();
=======

>>>>>>> Stashed changes
  // .KeyspaceMessageContents keyspace = 9;
  bool has_keyspace() const;
  private:
  bool _internal_has_keyspace() const;

  public:
  void clear_keyspace() ;
  const ::KeyspaceMessageContents& keyspace() const;
  ::KeyspaceMessageContents* release_keyspace();
  ::KeyspaceMessageContents* mutable_keyspace();
  void set_allocated_keyspace(::KeyspaceMessageContents* keyspace);
  private:
  const ::KeyspaceMessageContents& _internal_keyspace() const;
  ::KeyspaceMessageContents* _internal_mutable_keyspace();
  public:
<<<<<<< Updated upstream
  void unsafe_arena_set_allocated_keyspace(
      ::KeyspaceMessageContents* keyspace);
  ::KeyspaceMessageContents* unsafe_arena_release_keyspace();
=======

>>>>>>> Stashed changes
  void clear_message();
  MessageCase message_case() const;
  // @@protoc_insertion_point(class_scope:Message)
 private:
  class _Internal;
  void set_has_info();
  void set_has_keyspace();

  inline bool has_message() const;
  inline void clear_has_message();

<<<<<<< Updated upstream
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sourcenodeid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr destnodeid_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_;
    ::uint64_t lastreceivedmsg_;
    int channelstate_;
    int messagetype_;
    ::int64_t messageid_;
    union MessageUnion {
      constexpr MessageUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::InformationalMessageContents* info_;
      ::KeyspaceMessageContents* keyspace_;
    } message_;
    ::uint32_t _oneof_case_[1];
=======
  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sourcenodeid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr destnodeid_;
  PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint64 lastreceivedmsg_;
  int channelstate_;
  int messagetype_;
  ::PROTOBUF_NAMESPACE_ID::int64 messageid_;
  union MessageUnion {
    MessageUnion() {}
    ::InformationalMessageContents* info_;
    ::KeyspaceMessageContents* keyspace_;
  } message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];
>>>>>>> Stashed changes

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// InformationalMessageContents_CollectionInformationRecord_CreationRateData

// double shortAllocationRatio = 1;
inline void InformationalMessageContents_CollectionInformationRecord_CreationRateData::clear_shortallocationratio() {
  _impl_.shortallocationratio_ = 0;
}
inline double InformationalMessageContents_CollectionInformationRecord_CreationRateData::shortallocationratio() const {
  // @@protoc_insertion_point(field_get:InformationalMessageContents.CollectionInformationRecord.CreationRateData.shortAllocationRatio)
  return _internal_shortallocationratio();
}
inline void InformationalMessageContents_CollectionInformationRecord_CreationRateData::set_shortallocationratio(double value) {
  _internal_set_shortallocationratio(value);
  // @@protoc_insertion_point(field_set:InformationalMessageContents.CollectionInformationRecord.CreationRateData.shortAllocationRatio)
}
inline double InformationalMessageContents_CollectionInformationRecord_CreationRateData::_internal_shortallocationratio() const {
  return _impl_.shortallocationratio_;
}
inline void InformationalMessageContents_CollectionInformationRecord_CreationRateData::_internal_set_shortallocationratio(double value) {
  ;
  _impl_.shortallocationratio_ = value;
}

// double longAllocationRatio = 2;
inline void InformationalMessageContents_CollectionInformationRecord_CreationRateData::clear_longallocationratio() {
  _impl_.longallocationratio_ = 0;
}
inline double InformationalMessageContents_CollectionInformationRecord_CreationRateData::longallocationratio() const {
  // @@protoc_insertion_point(field_get:InformationalMessageContents.CollectionInformationRecord.CreationRateData.longAllocationRatio)
  return _internal_longallocationratio();
}
inline void InformationalMessageContents_CollectionInformationRecord_CreationRateData::set_longallocationratio(double value) {
  _internal_set_longallocationratio(value);
  // @@protoc_insertion_point(field_set:InformationalMessageContents.CollectionInformationRecord.CreationRateData.longAllocationRatio)
}
inline double InformationalMessageContents_CollectionInformationRecord_CreationRateData::_internal_longallocationratio() const {
  return _impl_.longallocationratio_;
}
inline void InformationalMessageContents_CollectionInformationRecord_CreationRateData::_internal_set_longallocationratio(double value) {
  ;
  _impl_.longallocationratio_ = value;
}

// double createdPreviousDay = 3;
inline void InformationalMessageContents_CollectionInformationRecord_CreationRateData::clear_createdpreviousday() {
  _impl_.createdpreviousday_ = 0;
}
inline double InformationalMessageContents_CollectionInformationRecord_CreationRateData::createdpreviousday() const {
  // @@protoc_insertion_point(field_get:InformationalMessageContents.CollectionInformationRecord.CreationRateData.createdPreviousDay)
  return _internal_createdpreviousday();
}
inline void InformationalMessageContents_CollectionInformationRecord_CreationRateData::set_createdpreviousday(double value) {
  _internal_set_createdpreviousday(value);
  // @@protoc_insertion_point(field_set:InformationalMessageContents.CollectionInformationRecord.CreationRateData.createdPreviousDay)
}
inline double InformationalMessageContents_CollectionInformationRecord_CreationRateData::_internal_createdpreviousday() const {
  return _impl_.createdpreviousday_;
}
inline void InformationalMessageContents_CollectionInformationRecord_CreationRateData::_internal_set_createdpreviousday(double value) {
  ;
  _impl_.createdpreviousday_ = value;
}

// double createdPreviousWeek = 4;
inline void InformationalMessageContents_CollectionInformationRecord_CreationRateData::clear_createdpreviousweek() {
  _impl_.createdpreviousweek_ = 0;
}
inline double InformationalMessageContents_CollectionInformationRecord_CreationRateData::createdpreviousweek() const {
  // @@protoc_insertion_point(field_get:InformationalMessageContents.CollectionInformationRecord.CreationRateData.createdPreviousWeek)
  return _internal_createdpreviousweek();
}
inline void InformationalMessageContents_CollectionInformationRecord_CreationRateData::set_createdpreviousweek(double value) {
  _internal_set_createdpreviousweek(value);
  // @@protoc_insertion_point(field_set:InformationalMessageContents.CollectionInformationRecord.CreationRateData.createdPreviousWeek)
}
inline double InformationalMessageContents_CollectionInformationRecord_CreationRateData::_internal_createdpreviousweek() const {
  return _impl_.createdpreviousweek_;
}
inline void InformationalMessageContents_CollectionInformationRecord_CreationRateData::_internal_set_createdpreviousweek(double value) {
  ;
  _impl_.createdpreviousweek_ = value;
}

// -------------------------------------------------------------------

// InformationalMessageContents_CollectionInformationRecord

// string collectionName = 1;
inline void InformationalMessageContents_CollectionInformationRecord::clear_collectionname() {
<<<<<<< Updated upstream
  _impl_.collectionname_.ClearToEmpty();
=======
  collectionname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
>>>>>>> Stashed changes
}
inline const std::string& InformationalMessageContents_CollectionInformationRecord::collectionname() const {
  // @@protoc_insertion_point(field_get:InformationalMessageContents.CollectionInformationRecord.collectionName)
  return _internal_collectionname();
}
<<<<<<< Updated upstream
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void InformationalMessageContents_CollectionInformationRecord::set_collectionname(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.collectionname_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
=======
inline void InformationalMessageContents_CollectionInformationRecord::set_collectionname(const std::string& value) {
  _internal_set_collectionname(value);
>>>>>>> Stashed changes
  // @@protoc_insertion_point(field_set:InformationalMessageContents.CollectionInformationRecord.collectionName)
}
inline std::string* InformationalMessageContents_CollectionInformationRecord::mutable_collectionname() {
  // @@protoc_insertion_point(field_mutable:InformationalMessageContents.CollectionInformationRecord.collectionName)
  return _internal_mutable_collectionname();
}
inline const std::string& InformationalMessageContents_CollectionInformationRecord::_internal_collectionname() const {
<<<<<<< Updated upstream
  return _impl_.collectionname_.Get();
}
inline void InformationalMessageContents_CollectionInformationRecord::_internal_set_collectionname(const std::string& value) {
  ;


  _impl_.collectionname_.Set(value, GetArenaForAllocation());
}
inline std::string* InformationalMessageContents_CollectionInformationRecord::_internal_mutable_collectionname() {
  ;
  return _impl_.collectionname_.Mutable( GetArenaForAllocation());
}
inline std::string* InformationalMessageContents_CollectionInformationRecord::release_collectionname() {
  // @@protoc_insertion_point(field_release:InformationalMessageContents.CollectionInformationRecord.collectionName)
  return _impl_.collectionname_.Release();
}
inline void InformationalMessageContents_CollectionInformationRecord::set_allocated_collectionname(std::string* value) {
  _impl_.collectionname_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.collectionname_.IsDefault()) {
          _impl_.collectionname_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
=======
  return collectionname_.GetNoArena();
}
inline void InformationalMessageContents_CollectionInformationRecord::_internal_set_collectionname(const std::string& value) {
  
  collectionname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void InformationalMessageContents_CollectionInformationRecord::set_collectionname(std::string&& value) {
  
  collectionname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:InformationalMessageContents.CollectionInformationRecord.collectionName)
}
inline void InformationalMessageContents_CollectionInformationRecord::set_collectionname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  collectionname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:InformationalMessageContents.CollectionInformationRecord.collectionName)
}
inline void InformationalMessageContents_CollectionInformationRecord::set_collectionname(const char* value, size_t size) {
  
  collectionname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:InformationalMessageContents.CollectionInformationRecord.collectionName)
}
inline std::string* InformationalMessageContents_CollectionInformationRecord::_internal_mutable_collectionname() {
  
  return collectionname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InformationalMessageContents_CollectionInformationRecord::release_collectionname() {
  // @@protoc_insertion_point(field_release:InformationalMessageContents.CollectionInformationRecord.collectionName)
  
  return collectionname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void InformationalMessageContents_CollectionInformationRecord::set_allocated_collectionname(std::string* collectionname) {
  if (collectionname != nullptr) {
    
  } else {
    
  }
  collectionname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), collectionname);
>>>>>>> Stashed changes
  // @@protoc_insertion_point(field_set_allocated:InformationalMessageContents.CollectionInformationRecord.collectionName)
}

// .InformationalMessageContents.CollectionInformationRecord.CreationRateData creationRateData = 2;
inline bool InformationalMessageContents_CollectionInformationRecord::has_creationratedata() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.creationratedata_ != nullptr);
  return value;
}
inline void InformationalMessageContents_CollectionInformationRecord::clear_creationratedata() {
<<<<<<< Updated upstream
  if (_impl_.creationratedata_ != nullptr) _impl_.creationratedata_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::InformationalMessageContents_CollectionInformationRecord_CreationRateData& InformationalMessageContents_CollectionInformationRecord::_internal_creationratedata() const {
  const ::InformationalMessageContents_CollectionInformationRecord_CreationRateData* p = _impl_.creationratedata_;
  return p != nullptr ? *p : reinterpret_cast<const ::InformationalMessageContents_CollectionInformationRecord_CreationRateData&>(
      ::_InformationalMessageContents_CollectionInformationRecord_CreationRateData_default_instance_);
=======
  if (GetArenaNoVirtual() == nullptr && creationratedata_ != nullptr) {
    delete creationratedata_;
  }
  creationratedata_ = nullptr;
}
inline const ::InformationalMessageContents_CollectionInformationRecord_CreationRateData& InformationalMessageContents_CollectionInformationRecord::_internal_creationratedata() const {
  const ::InformationalMessageContents_CollectionInformationRecord_CreationRateData* p = creationratedata_;
  return p != nullptr ? *p : *reinterpret_cast<const ::InformationalMessageContents_CollectionInformationRecord_CreationRateData*>(
      &::_InformationalMessageContents_CollectionInformationRecord_CreationRateData_default_instance_);
>>>>>>> Stashed changes
}
inline const ::InformationalMessageContents_CollectionInformationRecord_CreationRateData& InformationalMessageContents_CollectionInformationRecord::creationratedata() const {
  // @@protoc_insertion_point(field_get:InformationalMessageContents.CollectionInformationRecord.creationRateData)
  return _internal_creationratedata();
}
<<<<<<< Updated upstream
inline void InformationalMessageContents_CollectionInformationRecord::unsafe_arena_set_allocated_creationratedata(
    ::InformationalMessageContents_CollectionInformationRecord_CreationRateData* creationratedata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.creationratedata_);
  }
  _impl_.creationratedata_ = creationratedata;
  if (creationratedata) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:InformationalMessageContents.CollectionInformationRecord.creationRateData)
}
inline ::InformationalMessageContents_CollectionInformationRecord_CreationRateData* InformationalMessageContents_CollectionInformationRecord::release_creationratedata() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::InformationalMessageContents_CollectionInformationRecord_CreationRateData* temp = _impl_.creationratedata_;
  _impl_.creationratedata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::InformationalMessageContents_CollectionInformationRecord_CreationRateData* InformationalMessageContents_CollectionInformationRecord::unsafe_arena_release_creationratedata() {
=======
inline ::InformationalMessageContents_CollectionInformationRecord_CreationRateData* InformationalMessageContents_CollectionInformationRecord::release_creationratedata() {
>>>>>>> Stashed changes
  // @@protoc_insertion_point(field_release:InformationalMessageContents.CollectionInformationRecord.creationRateData)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::InformationalMessageContents_CollectionInformationRecord_CreationRateData* temp = _impl_.creationratedata_;
  _impl_.creationratedata_ = nullptr;
  return temp;
}
inline ::InformationalMessageContents_CollectionInformationRecord_CreationRateData* InformationalMessageContents_CollectionInformationRecord::_internal_mutable_creationratedata() {
<<<<<<< Updated upstream
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.creationratedata_ == nullptr) {
    auto* p = CreateMaybeMessage<::InformationalMessageContents_CollectionInformationRecord_CreationRateData>(GetArenaForAllocation());
    _impl_.creationratedata_ = p;
=======
  
  if (creationratedata_ == nullptr) {
    auto* p = CreateMaybeMessage<::InformationalMessageContents_CollectionInformationRecord_CreationRateData>(GetArenaNoVirtual());
    creationratedata_ = p;
>>>>>>> Stashed changes
  }
  return _impl_.creationratedata_;
}
inline ::InformationalMessageContents_CollectionInformationRecord_CreationRateData* InformationalMessageContents_CollectionInformationRecord::mutable_creationratedata() {
  // @@protoc_insertion_point(field_mutable:InformationalMessageContents.CollectionInformationRecord.creationRateData)
  return _internal_mutable_creationratedata();
}
inline void InformationalMessageContents_CollectionInformationRecord::set_allocated_creationratedata(::InformationalMessageContents_CollectionInformationRecord_CreationRateData* creationratedata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete _impl_.creationratedata_;
  }
  if (creationratedata) {
<<<<<<< Updated upstream
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(creationratedata);
=======
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
>>>>>>> Stashed changes
    if (message_arena != submessage_arena) {
      creationratedata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, creationratedata, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.creationratedata_ = creationratedata;
  // @@protoc_insertion_point(field_set_allocated:InformationalMessageContents.CollectionInformationRecord.creationRateData)
}

// -------------------------------------------------------------------

// InformationalMessageContents

// repeated .InformationalMessageContents.CollectionInformationRecord records = 1;
inline int InformationalMessageContents::_internal_records_size() const {
  return _impl_.records_.size();
}
inline int InformationalMessageContents::records_size() const {
  return _internal_records_size();
}
inline void InformationalMessageContents::clear_records() {
  _internal_mutable_records()->Clear();
}
inline ::InformationalMessageContents_CollectionInformationRecord* InformationalMessageContents::mutable_records(int index) {
  // @@protoc_insertion_point(field_mutable:InformationalMessageContents.records)
  return _internal_mutable_records()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InformationalMessageContents_CollectionInformationRecord >*
InformationalMessageContents::mutable_records() {
  // @@protoc_insertion_point(field_mutable_list:InformationalMessageContents.records)
  return _internal_mutable_records();
}
inline const ::InformationalMessageContents_CollectionInformationRecord& InformationalMessageContents::_internal_records(int index) const {
  return _internal_records().Get(index);
}
inline const ::InformationalMessageContents_CollectionInformationRecord& InformationalMessageContents::records(int index) const {
  // @@protoc_insertion_point(field_get:InformationalMessageContents.records)
  return _internal_records(index);
}
inline ::InformationalMessageContents_CollectionInformationRecord* InformationalMessageContents::_internal_add_records() {
  return _internal_mutable_records()->Add();
}
inline ::InformationalMessageContents_CollectionInformationRecord* InformationalMessageContents::add_records() {
  // @@protoc_insertion_point(field_add:InformationalMessageContents.records)
  return _internal_add_records();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::InformationalMessageContents_CollectionInformationRecord >&
InformationalMessageContents::records() const {
  // @@protoc_insertion_point(field_list:InformationalMessageContents.records)
  return _internal_records();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::InformationalMessageContents_CollectionInformationRecord>&
InformationalMessageContents::_internal_records() const {
  return _impl_.records_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::InformationalMessageContents_CollectionInformationRecord>*
InformationalMessageContents::_internal_mutable_records() {
  return &_impl_.records_;
}

// -------------------------------------------------------------------

// KeyspaceMessageContents_Keyspace

// string name = 1;
inline void KeyspaceMessageContents_Keyspace::clear_name() {
<<<<<<< Updated upstream
  _impl_.name_.ClearToEmpty();
=======
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
>>>>>>> Stashed changes
}
inline const std::string& KeyspaceMessageContents_Keyspace::name() const {
  // @@protoc_insertion_point(field_get:KeyspaceMessageContents.Keyspace.name)
  return _internal_name();
}
<<<<<<< Updated upstream
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void KeyspaceMessageContents_Keyspace::set_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
=======
inline void KeyspaceMessageContents_Keyspace::set_name(const std::string& value) {
  _internal_set_name(value);
>>>>>>> Stashed changes
  // @@protoc_insertion_point(field_set:KeyspaceMessageContents.Keyspace.name)
}
inline std::string* KeyspaceMessageContents_Keyspace::mutable_name() {
  // @@protoc_insertion_point(field_mutable:KeyspaceMessageContents.Keyspace.name)
  return _internal_mutable_name();
}
inline const std::string& KeyspaceMessageContents_Keyspace::_internal_name() const {
<<<<<<< Updated upstream
  return _impl_.name_.Get();
}
inline void KeyspaceMessageContents_Keyspace::_internal_set_name(const std::string& value) {
  ;


  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* KeyspaceMessageContents_Keyspace::_internal_mutable_name() {
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* KeyspaceMessageContents_Keyspace::release_name() {
  // @@protoc_insertion_point(field_release:KeyspaceMessageContents.Keyspace.name)
  return _impl_.name_.Release();
}
inline void KeyspaceMessageContents_Keyspace::set_allocated_name(std::string* value) {
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
=======
  return name_.GetNoArena();
}
inline void KeyspaceMessageContents_Keyspace::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void KeyspaceMessageContents_Keyspace::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KeyspaceMessageContents.Keyspace.name)
}
inline void KeyspaceMessageContents_Keyspace::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KeyspaceMessageContents.Keyspace.name)
}
inline void KeyspaceMessageContents_Keyspace::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KeyspaceMessageContents.Keyspace.name)
}
inline std::string* KeyspaceMessageContents_Keyspace::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* KeyspaceMessageContents_Keyspace::release_name() {
  // @@protoc_insertion_point(field_release:KeyspaceMessageContents.Keyspace.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void KeyspaceMessageContents_Keyspace::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
>>>>>>> Stashed changes
  // @@protoc_insertion_point(field_set_allocated:KeyspaceMessageContents.Keyspace.name)
}

// uint64 startID = 2;
inline void KeyspaceMessageContents_Keyspace::clear_startid() {
<<<<<<< Updated upstream
  _impl_.startid_ = ::uint64_t{0u};
}
inline ::uint64_t KeyspaceMessageContents_Keyspace::startid() const {
  // @@protoc_insertion_point(field_get:KeyspaceMessageContents.Keyspace.startID)
  return _internal_startid();
}
inline void KeyspaceMessageContents_Keyspace::set_startid(::uint64_t value) {
=======
  startid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 KeyspaceMessageContents_Keyspace::_internal_startid() const {
  return startid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 KeyspaceMessageContents_Keyspace::startid() const {
  // @@protoc_insertion_point(field_get:KeyspaceMessageContents.Keyspace.startID)
  return _internal_startid();
}
inline void KeyspaceMessageContents_Keyspace::_internal_set_startid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  startid_ = value;
}
inline void KeyspaceMessageContents_Keyspace::set_startid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
>>>>>>> Stashed changes
  _internal_set_startid(value);
  // @@protoc_insertion_point(field_set:KeyspaceMessageContents.Keyspace.startID)
}
inline ::uint64_t KeyspaceMessageContents_Keyspace::_internal_startid() const {
  return _impl_.startid_;
}
inline void KeyspaceMessageContents_Keyspace::_internal_set_startid(::uint64_t value) {
  ;
  _impl_.startid_ = value;
}

// uint64 endID = 3;
inline void KeyspaceMessageContents_Keyspace::clear_endid() {
<<<<<<< Updated upstream
  _impl_.endid_ = ::uint64_t{0u};
}
inline ::uint64_t KeyspaceMessageContents_Keyspace::endid() const {
  // @@protoc_insertion_point(field_get:KeyspaceMessageContents.Keyspace.endID)
  return _internal_endid();
}
inline void KeyspaceMessageContents_Keyspace::set_endid(::uint64_t value) {
=======
  endid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 KeyspaceMessageContents_Keyspace::_internal_endid() const {
  return endid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 KeyspaceMessageContents_Keyspace::endid() const {
  // @@protoc_insertion_point(field_get:KeyspaceMessageContents.Keyspace.endID)
  return _internal_endid();
}
inline void KeyspaceMessageContents_Keyspace::_internal_set_endid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  endid_ = value;
}
inline void KeyspaceMessageContents_Keyspace::set_endid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
>>>>>>> Stashed changes
  _internal_set_endid(value);
  // @@protoc_insertion_point(field_set:KeyspaceMessageContents.Keyspace.endID)
}
inline ::uint64_t KeyspaceMessageContents_Keyspace::_internal_endid() const {
  return _impl_.endid_;
}
inline void KeyspaceMessageContents_Keyspace::_internal_set_endid(::uint64_t value) {
  ;
  _impl_.endid_ = value;
}

// uint32 suffixBits = 4;
inline void KeyspaceMessageContents_Keyspace::clear_suffixbits() {
  _impl_.suffixbits_ = 0u;
}
<<<<<<< Updated upstream
inline ::uint32_t KeyspaceMessageContents_Keyspace::suffixbits() const {
  // @@protoc_insertion_point(field_get:KeyspaceMessageContents.Keyspace.suffixBits)
  return _internal_suffixbits();
}
inline void KeyspaceMessageContents_Keyspace::set_suffixbits(::uint32_t value) {
=======
inline ::PROTOBUF_NAMESPACE_ID::uint32 KeyspaceMessageContents_Keyspace::_internal_suffixbits() const {
  return suffixbits_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KeyspaceMessageContents_Keyspace::suffixbits() const {
  // @@protoc_insertion_point(field_get:KeyspaceMessageContents.Keyspace.suffixBits)
  return _internal_suffixbits();
}
inline void KeyspaceMessageContents_Keyspace::_internal_set_suffixbits(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  suffixbits_ = value;
}
inline void KeyspaceMessageContents_Keyspace::set_suffixbits(::PROTOBUF_NAMESPACE_ID::uint32 value) {
>>>>>>> Stashed changes
  _internal_set_suffixbits(value);
  // @@protoc_insertion_point(field_set:KeyspaceMessageContents.Keyspace.suffixBits)
}
inline ::uint32_t KeyspaceMessageContents_Keyspace::_internal_suffixbits() const {
  return _impl_.suffixbits_;
}
inline void KeyspaceMessageContents_Keyspace::_internal_set_suffixbits(::uint32_t value) {
  ;
  _impl_.suffixbits_ = value;
}

// -------------------------------------------------------------------

// KeyspaceMessageContents

// repeated .KeyspaceMessageContents.Keyspace keyspaces = 1;
inline int KeyspaceMessageContents::_internal_keyspaces_size() const {
  return _impl_.keyspaces_.size();
}
inline int KeyspaceMessageContents::keyspaces_size() const {
  return _internal_keyspaces_size();
}
inline void KeyspaceMessageContents::clear_keyspaces() {
  _internal_mutable_keyspaces()->Clear();
}
inline ::KeyspaceMessageContents_Keyspace* KeyspaceMessageContents::mutable_keyspaces(int index) {
  // @@protoc_insertion_point(field_mutable:KeyspaceMessageContents.keyspaces)
  return _internal_mutable_keyspaces()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KeyspaceMessageContents_Keyspace >*
KeyspaceMessageContents::mutable_keyspaces() {
  // @@protoc_insertion_point(field_mutable_list:KeyspaceMessageContents.keyspaces)
  return _internal_mutable_keyspaces();
}
inline const ::KeyspaceMessageContents_Keyspace& KeyspaceMessageContents::_internal_keyspaces(int index) const {
  return _internal_keyspaces().Get(index);
}
inline const ::KeyspaceMessageContents_Keyspace& KeyspaceMessageContents::keyspaces(int index) const {
  // @@protoc_insertion_point(field_get:KeyspaceMessageContents.keyspaces)
  return _internal_keyspaces(index);
}
inline ::KeyspaceMessageContents_Keyspace* KeyspaceMessageContents::_internal_add_keyspaces() {
  return _internal_mutable_keyspaces()->Add();
}
inline ::KeyspaceMessageContents_Keyspace* KeyspaceMessageContents::add_keyspaces() {
  // @@protoc_insertion_point(field_add:KeyspaceMessageContents.keyspaces)
  return _internal_add_keyspaces();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KeyspaceMessageContents_Keyspace >&
KeyspaceMessageContents::keyspaces() const {
  // @@protoc_insertion_point(field_list:KeyspaceMessageContents.keyspaces)
  return _internal_keyspaces();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::KeyspaceMessageContents_Keyspace>&
KeyspaceMessageContents::_internal_keyspaces() const {
  return _impl_.keyspaces_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::KeyspaceMessageContents_Keyspace>*
KeyspaceMessageContents::_internal_mutable_keyspaces() {
  return &_impl_.keyspaces_;
}

// -------------------------------------------------------------------

// Message

// bytes sourceNodeID = 1;
inline void Message::clear_sourcenodeid() {
<<<<<<< Updated upstream
  _impl_.sourcenodeid_.ClearToEmpty();
=======
  sourcenodeid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
>>>>>>> Stashed changes
}
inline const std::string& Message::sourcenodeid() const {
  // @@protoc_insertion_point(field_get:Message.sourceNodeID)
  return _internal_sourcenodeid();
}
<<<<<<< Updated upstream
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message::set_sourcenodeid(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.sourcenodeid_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
=======
inline void Message::set_sourcenodeid(const std::string& value) {
  _internal_set_sourcenodeid(value);
>>>>>>> Stashed changes
  // @@protoc_insertion_point(field_set:Message.sourceNodeID)
}
inline std::string* Message::mutable_sourcenodeid() {
  // @@protoc_insertion_point(field_mutable:Message.sourceNodeID)
  return _internal_mutable_sourcenodeid();
}
inline const std::string& Message::_internal_sourcenodeid() const {
<<<<<<< Updated upstream
  return _impl_.sourcenodeid_.Get();
}
inline void Message::_internal_set_sourcenodeid(const std::string& value) {
  ;


  _impl_.sourcenodeid_.Set(value, GetArenaForAllocation());
}
inline std::string* Message::_internal_mutable_sourcenodeid() {
  ;
  return _impl_.sourcenodeid_.Mutable( GetArenaForAllocation());
}
inline std::string* Message::release_sourcenodeid() {
  // @@protoc_insertion_point(field_release:Message.sourceNodeID)
  return _impl_.sourcenodeid_.Release();
}
inline void Message::set_allocated_sourcenodeid(std::string* value) {
  _impl_.sourcenodeid_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.sourcenodeid_.IsDefault()) {
          _impl_.sourcenodeid_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
=======
  return sourcenodeid_.GetNoArena();
}
inline void Message::_internal_set_sourcenodeid(const std::string& value) {
  
  sourcenodeid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Message::set_sourcenodeid(std::string&& value) {
  
  sourcenodeid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Message.sourceNodeID)
}
inline void Message::set_sourcenodeid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sourcenodeid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Message.sourceNodeID)
}
inline void Message::set_sourcenodeid(const void* value, size_t size) {
  
  sourcenodeid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Message.sourceNodeID)
}
inline std::string* Message::_internal_mutable_sourcenodeid() {
  
  return sourcenodeid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Message::release_sourcenodeid() {
  // @@protoc_insertion_point(field_release:Message.sourceNodeID)
  
  return sourcenodeid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Message::set_allocated_sourcenodeid(std::string* sourcenodeid) {
  if (sourcenodeid != nullptr) {
    
  } else {
    
  }
  sourcenodeid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sourcenodeid);
>>>>>>> Stashed changes
  // @@protoc_insertion_point(field_set_allocated:Message.sourceNodeID)
}

// bytes destNodeID = 2;
inline void Message::clear_destnodeid() {
<<<<<<< Updated upstream
  _impl_.destnodeid_.ClearToEmpty();
=======
  destnodeid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
>>>>>>> Stashed changes
}
inline const std::string& Message::destnodeid() const {
  // @@protoc_insertion_point(field_get:Message.destNodeID)
  return _internal_destnodeid();
}
<<<<<<< Updated upstream
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message::set_destnodeid(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.destnodeid_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
=======
inline void Message::set_destnodeid(const std::string& value) {
  _internal_set_destnodeid(value);
>>>>>>> Stashed changes
  // @@protoc_insertion_point(field_set:Message.destNodeID)
}
inline std::string* Message::mutable_destnodeid() {
  // @@protoc_insertion_point(field_mutable:Message.destNodeID)
  return _internal_mutable_destnodeid();
}
inline const std::string& Message::_internal_destnodeid() const {
<<<<<<< Updated upstream
  return _impl_.destnodeid_.Get();
}
inline void Message::_internal_set_destnodeid(const std::string& value) {
  ;


  _impl_.destnodeid_.Set(value, GetArenaForAllocation());
}
inline std::string* Message::_internal_mutable_destnodeid() {
  ;
  return _impl_.destnodeid_.Mutable( GetArenaForAllocation());
}
inline std::string* Message::release_destnodeid() {
  // @@protoc_insertion_point(field_release:Message.destNodeID)
  return _impl_.destnodeid_.Release();
}
inline void Message::set_allocated_destnodeid(std::string* value) {
  _impl_.destnodeid_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.destnodeid_.IsDefault()) {
          _impl_.destnodeid_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
=======
  return destnodeid_.GetNoArena();
}
inline void Message::_internal_set_destnodeid(const std::string& value) {
  
  destnodeid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Message::set_destnodeid(std::string&& value) {
  
  destnodeid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Message.destNodeID)
}
inline void Message::set_destnodeid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  destnodeid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Message.destNodeID)
}
inline void Message::set_destnodeid(const void* value, size_t size) {
  
  destnodeid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Message.destNodeID)
}
inline std::string* Message::_internal_mutable_destnodeid() {
  
  return destnodeid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Message::release_destnodeid() {
  // @@protoc_insertion_point(field_release:Message.destNodeID)
  
  return destnodeid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Message::set_allocated_destnodeid(std::string* destnodeid) {
  if (destnodeid != nullptr) {
    
  } else {
    
  }
  destnodeid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), destnodeid);
>>>>>>> Stashed changes
  // @@protoc_insertion_point(field_set_allocated:Message.destNodeID)
}

// uint64 lastReceivedMsg = 3;
inline void Message::clear_lastreceivedmsg() {
<<<<<<< Updated upstream
  _impl_.lastreceivedmsg_ = ::uint64_t{0u};
}
inline ::uint64_t Message::lastreceivedmsg() const {
  // @@protoc_insertion_point(field_get:Message.lastReceivedMsg)
  return _internal_lastreceivedmsg();
}
inline void Message::set_lastreceivedmsg(::uint64_t value) {
=======
  lastreceivedmsg_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Message::_internal_lastreceivedmsg() const {
  return lastreceivedmsg_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Message::lastreceivedmsg() const {
  // @@protoc_insertion_point(field_get:Message.lastReceivedMsg)
  return _internal_lastreceivedmsg();
}
inline void Message::_internal_set_lastreceivedmsg(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  lastreceivedmsg_ = value;
}
inline void Message::set_lastreceivedmsg(::PROTOBUF_NAMESPACE_ID::uint64 value) {
>>>>>>> Stashed changes
  _internal_set_lastreceivedmsg(value);
  // @@protoc_insertion_point(field_set:Message.lastReceivedMsg)
}
inline ::uint64_t Message::_internal_lastreceivedmsg() const {
  return _impl_.lastreceivedmsg_;
}
inline void Message::_internal_set_lastreceivedmsg(::uint64_t value) {
  ;
  _impl_.lastreceivedmsg_ = value;
}

// .Message.ChannelState channelState = 4;
inline void Message::clear_channelstate() {
  _impl_.channelstate_ = 0;
}
inline ::Message_ChannelState Message::channelstate() const {
  // @@protoc_insertion_point(field_get:Message.channelState)
  return _internal_channelstate();
}
inline void Message::set_channelstate(::Message_ChannelState value) {
   _internal_set_channelstate(value);
  // @@protoc_insertion_point(field_set:Message.channelState)
}
inline ::Message_ChannelState Message::_internal_channelstate() const {
  return static_cast<::Message_ChannelState>(_impl_.channelstate_);
}
inline void Message::_internal_set_channelstate(::Message_ChannelState value) {
  ;
  _impl_.channelstate_ = value;
}

// .google.protobuf.Timestamp timestamp = 5;
inline bool Message::has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.timestamp_ != nullptr);
  return value;
}
<<<<<<< Updated upstream
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Message::_internal_timestamp() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
=======
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Message::_internal_timestamp() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = timestamp_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
>>>>>>> Stashed changes
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Message::timestamp() const {
  // @@protoc_insertion_point(field_get:Message.timestamp)
  return _internal_timestamp();
}
<<<<<<< Updated upstream
inline void Message::unsafe_arena_set_allocated_timestamp(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.timestamp_);
  }
  _impl_.timestamp_ = timestamp;
  if (timestamp) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Message.timestamp)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Message::release_timestamp() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Message::unsafe_arena_release_timestamp() {
  // @@protoc_insertion_point(field_release:Message.timestamp)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Message::_internal_mutable_timestamp() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.timestamp_ = p;
=======
inline PROTOBUF_NAMESPACE_ID::Timestamp* Message::release_timestamp() {
  // @@protoc_insertion_point(field_release:Message.timestamp)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = timestamp_;
  timestamp_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Message::_internal_mutable_timestamp() {
  
  if (timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    timestamp_ = p;
>>>>>>> Stashed changes
  }
  return _impl_.timestamp_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Message::mutable_timestamp() {
  // @@protoc_insertion_point(field_mutable:Message.timestamp)
  return _internal_mutable_timestamp();
}
inline void Message::set_allocated_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.timestamp_);
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
<<<<<<< Updated upstream
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp));
=======
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp)->GetArena();
>>>>>>> Stashed changes
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:Message.timestamp)
}

// sint64 messageID = 6;
inline void Message::clear_messageid() {
<<<<<<< Updated upstream
  _impl_.messageid_ = ::int64_t{0};
}
inline ::int64_t Message::messageid() const {
  // @@protoc_insertion_point(field_get:Message.messageID)
  return _internal_messageid();
}
inline void Message::set_messageid(::int64_t value) {
=======
  messageid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Message::_internal_messageid() const {
  return messageid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Message::messageid() const {
  // @@protoc_insertion_point(field_get:Message.messageID)
  return _internal_messageid();
}
inline void Message::_internal_set_messageid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  messageid_ = value;
}
inline void Message::set_messageid(::PROTOBUF_NAMESPACE_ID::int64 value) {
>>>>>>> Stashed changes
  _internal_set_messageid(value);
  // @@protoc_insertion_point(field_set:Message.messageID)
}
inline ::int64_t Message::_internal_messageid() const {
  return _impl_.messageid_;
}
inline void Message::_internal_set_messageid(::int64_t value) {
  ;
  _impl_.messageid_ = value;
}

// .Message.MessageType messageType = 7;
inline void Message::clear_messagetype() {
  _impl_.messagetype_ = 0;
}
inline ::Message_MessageType Message::messagetype() const {
  // @@protoc_insertion_point(field_get:Message.messageType)
  return _internal_messagetype();
}
inline void Message::set_messagetype(::Message_MessageType value) {
   _internal_set_messagetype(value);
  // @@protoc_insertion_point(field_set:Message.messageType)
}
inline ::Message_MessageType Message::_internal_messagetype() const {
  return static_cast<::Message_MessageType>(_impl_.messagetype_);
}
inline void Message::_internal_set_messagetype(::Message_MessageType value) {
  ;
  _impl_.messagetype_ = value;
}

// .InformationalMessageContents info = 8;
inline bool Message::has_info() const {
  return message_case() == kInfo;
}
inline bool Message::_internal_has_info() const {
  return message_case() == kInfo;
}
inline void Message::set_has_info() {
  _impl_._oneof_case_[0] = kInfo;
}
inline void Message::clear_info() {
<<<<<<< Updated upstream
  if (message_case() == kInfo) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.info_;
    }
=======
  if (_internal_has_info()) {
    delete message_.info_;
>>>>>>> Stashed changes
    clear_has_message();
  }
}
inline ::InformationalMessageContents* Message::release_info() {
  // @@protoc_insertion_point(field_release:Message.info)
  if (message_case() == kInfo) {
    clear_has_message();
<<<<<<< Updated upstream
    ::InformationalMessageContents* temp = _impl_.message_.info_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.info_ = nullptr;
=======
      ::InformationalMessageContents* temp = message_.info_;
    message_.info_ = nullptr;
>>>>>>> Stashed changes
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::InformationalMessageContents& Message::_internal_info() const {
<<<<<<< Updated upstream
  return message_case() == kInfo
      ? *_impl_.message_.info_
      : reinterpret_cast<::InformationalMessageContents&>(::_InformationalMessageContents_default_instance_);
=======
  return _internal_has_info()
      ? *message_.info_
      : *reinterpret_cast< ::InformationalMessageContents*>(&::_InformationalMessageContents_default_instance_);
>>>>>>> Stashed changes
}
inline const ::InformationalMessageContents& Message::info() const {
  // @@protoc_insertion_point(field_get:Message.info)
  return _internal_info();
}
<<<<<<< Updated upstream
inline ::InformationalMessageContents* Message::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Message.info)
  if (message_case() == kInfo) {
    clear_has_message();
    ::InformationalMessageContents* temp = _impl_.message_.info_;
    _impl_.message_.info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_info(::InformationalMessageContents* info) {
  clear_message();
  if (info) {
    set_has_info();
    _impl_.message_.info_ = info;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Message.info)
}
=======
>>>>>>> Stashed changes
inline ::InformationalMessageContents* Message::_internal_mutable_info() {
  if (message_case() != kInfo) {
    clear_message();
    set_has_info();
<<<<<<< Updated upstream
    _impl_.message_.info_ = CreateMaybeMessage< ::InformationalMessageContents >(GetArenaForAllocation());
=======
    message_.info_ = CreateMaybeMessage< ::InformationalMessageContents >(
        GetArenaNoVirtual());
>>>>>>> Stashed changes
  }
  return _impl_.message_.info_;
}
inline ::InformationalMessageContents* Message::mutable_info() {
  // @@protoc_insertion_point(field_mutable:Message.info)
  return _internal_mutable_info();
}

// .KeyspaceMessageContents keyspace = 9;
inline bool Message::has_keyspace() const {
  return message_case() == kKeyspace;
}
inline bool Message::_internal_has_keyspace() const {
  return message_case() == kKeyspace;
}
inline void Message::set_has_keyspace() {
  _impl_._oneof_case_[0] = kKeyspace;
}
inline void Message::clear_keyspace() {
<<<<<<< Updated upstream
  if (message_case() == kKeyspace) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_.keyspace_;
    }
=======
  if (_internal_has_keyspace()) {
    delete message_.keyspace_;
>>>>>>> Stashed changes
    clear_has_message();
  }
}
inline ::KeyspaceMessageContents* Message::release_keyspace() {
  // @@protoc_insertion_point(field_release:Message.keyspace)
  if (message_case() == kKeyspace) {
    clear_has_message();
<<<<<<< Updated upstream
    ::KeyspaceMessageContents* temp = _impl_.message_.keyspace_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_.keyspace_ = nullptr;
=======
      ::KeyspaceMessageContents* temp = message_.keyspace_;
    message_.keyspace_ = nullptr;
>>>>>>> Stashed changes
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::KeyspaceMessageContents& Message::_internal_keyspace() const {
<<<<<<< Updated upstream
  return message_case() == kKeyspace
      ? *_impl_.message_.keyspace_
      : reinterpret_cast<::KeyspaceMessageContents&>(::_KeyspaceMessageContents_default_instance_);
=======
  return _internal_has_keyspace()
      ? *message_.keyspace_
      : *reinterpret_cast< ::KeyspaceMessageContents*>(&::_KeyspaceMessageContents_default_instance_);
>>>>>>> Stashed changes
}
inline const ::KeyspaceMessageContents& Message::keyspace() const {
  // @@protoc_insertion_point(field_get:Message.keyspace)
  return _internal_keyspace();
}
<<<<<<< Updated upstream
inline ::KeyspaceMessageContents* Message::unsafe_arena_release_keyspace() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Message.keyspace)
  if (message_case() == kKeyspace) {
    clear_has_message();
    ::KeyspaceMessageContents* temp = _impl_.message_.keyspace_;
    _impl_.message_.keyspace_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_keyspace(::KeyspaceMessageContents* keyspace) {
  clear_message();
  if (keyspace) {
    set_has_keyspace();
    _impl_.message_.keyspace_ = keyspace;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Message.keyspace)
}
=======
>>>>>>> Stashed changes
inline ::KeyspaceMessageContents* Message::_internal_mutable_keyspace() {
  if (message_case() != kKeyspace) {
    clear_message();
    set_has_keyspace();
<<<<<<< Updated upstream
    _impl_.message_.keyspace_ = CreateMaybeMessage< ::KeyspaceMessageContents >(GetArenaForAllocation());
=======
    message_.keyspace_ = CreateMaybeMessage< ::KeyspaceMessageContents >(
        GetArenaNoVirtual());
>>>>>>> Stashed changes
  }
  return _impl_.message_.keyspace_;
}
inline ::KeyspaceMessageContents* Message::mutable_keyspace() {
  // @@protoc_insertion_point(field_mutable:Message.keyspace)
  return _internal_mutable_keyspace();
}

inline bool Message::has_message() const {
  return message_case() != MESSAGE_NOT_SET;
}
inline void Message::clear_has_message() {
  _impl_._oneof_case_[0] = MESSAGE_NOT_SET;
}
inline Message::MessageCase Message::message_case() const {
  return Message::MessageCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::Message_ChannelState> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::Message_ChannelState>() {
  return ::Message_ChannelState_descriptor();
}
template <>
struct is_proto_enum<::Message_MessageType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::Message_MessageType>() {
  return ::Message_MessageType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_message_2eproto_2epb_2eh
